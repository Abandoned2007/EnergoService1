import logging
import csv
import gspread
import asyncio
from datetime import datetime, timedelta
from uuid import uuid4
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ConversationHandler, ContextTypes
)
from oauth2client.service_account import ServiceAccountCredentials

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8109187093:AAE3YTLbFlz3x-nq-J5kM_M-iMXmmwPNfF8"
ADMIN_IDS = {1333437457}  # –í–∞—à Telegram ID
bot_username = "EnergoServiceBot"   # –ò–º—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
CSV_FILE = "applications.csv"

GOOGLE_CREDS_FILE = "cultivated-age-438106-i2-39cf553124d7.json"
GOOGLE_SHEET_ID = "1ZJkQJjlPZELzTnjCqQhF5IDMmUWF-nG-yO2kzbK0G70"  # –¢–æ–ª—å–∫–æ ID!

SCOPE = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive"
]

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("workbot")

ASK_NAME, ASK_CHOICE, ASK_REASON = range(3)

# === –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏: { job_key: {...} }
jobs_context = {}  # –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
jobs_applications = {}  # –∑–∞—è–≤–∫–∏ –ø–æ –∫–∞–∂–¥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ {job_key: [user_dict, ...]}

def get_worksheet():
    creds = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_CREDS_FILE, SCOPE)
    client = gspread.authorize(creds)
    return client.open_by_key(GOOGLE_SHEET_ID).sheet1

async def save_application(job_key, data, choice, reason):
    row = [
        data.get("fio", ""),
        choice,
        reason,
        data.get("work_title", ""),
        data.get("city", ""),
        data.get("description", "")
    ]
    # –í CSV
    with open(CSV_FILE, "a", newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(row)
    # –í Google Sheets
    try:
        ws = get_worksheet()
        ws.append_row(row, value_input_option="USER_ENTERED")
    except Exception as e:
        logger.error(f"Google Sheets error: {e}")
    # –í —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    jobs_applications.setdefault(job_key, []).append({
        "fio": data.get("fio", ""),
        "choice": choice,
        "reason": reason
    })


async def notify_admins_about_job(context, job_key):
    job = jobs_context.get(job_key)
    if not job:
        return
    applications = jobs_applications.get(job_key, [])
    go_users = [a["fio"] for a in applications if a["choice"] == "–ï–¥—É"]
    nogo_users = [f'{a["fio"]} ‚Äì {a["reason"]}' for a in applications if a["choice"] == "–ù–µ –µ–¥—É"]
    text = f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞:\n\n" \
           f"–†–∞–±–æ—Ç—ã: {job['work_title']}\n–ì–æ—Ä–æ–¥: {job['city']}\n\n"
    text += "üí™ –ó–∞–ø–∏—Å–∞–ª–∏—Å—å:\n" + ("\n".join(go_users) if go_users else "–ù–∏–∫—Ç–æ") + "\n\n"
    if nogo_users:
        text += "‚ùå –û—Ç–∫–∞–∑–∞–ª–∏—Å—å:\n" + "\n".join(nogo_users)
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(chat_id=admin_id, text=text)
        except Exception as e:
            logger.error(f"Cannot notify admin {admin_id}: {e}")

# ====== /post ======
async def post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        return
    if not context.args:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /post –ù–∞–∑–≤–∞–Ω–∏–µ_—Ä–∞–±–æ—Ç;–ì–æ—Ä–æ–¥;–û–ø–∏—Å–∞–Ω–∏–µ;–¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º")
        return
    try:
        text = " ".join(context.args)
        parts = [x.strip() for x in text.split(";")]
        if len(parts) < 4:
            raise Exception("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç!")
        work_title, city, description, deadline_raw = parts
        deadline = datetime.strptime(deadline_raw, "%d.%m.%Y %H:%M")
        if deadline < datetime.now():
            await update.message.reply_text("–û—à–∏–±–∫–∞: –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º!")
            return
    except Exception:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /post –ù–∞–∑–≤–∞–Ω–∏–µ_—Ä–∞–±–æ—Ç;–ì–æ—Ä–æ–¥;–û–ø–∏—Å–∞–Ω–∏–µ;–¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–ºn"
                                       "–ü—Ä–∏–º–µ—Ä: /post –ú–æ–Ω—Ç–∞–∂ –ü–°;–ú–æ—Å–∫–≤–∞;–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è;20.06.2024 19:00")
        return

    chat_id = update.message.chat_id

    job_key = str(uuid4())[:8]
    jobs_context[job_key] = {
        "work_title": work_title,
        "city": city,
        "description": description,
        "deadline": deadline.strftime("%d.%m.%Y %H:%M")
    }
    link = f"https://t.me/{bot_username}?start=apply_{job_key}"
    msg = (
        f"–†–∞–±–æ—Ç—ã: {work_title}\n"
        f"–ì–æ—Ä–æ–¥: {city}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
        f"–ó–∞–ø–∏—Å—å –¥–æ: {deadline.strftime('%d.%m.%Y %H:%M')}\n"
        f"–ö—Ç–æ –≥–æ—Ç–æ–≤ –≤—ã–µ—Ö–∞—Ç—å?"
    )
    keyboard = [[InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—ã", url=link)]]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –ù–ï –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–∞:
    sent_msg = await context.bot.send_message(
        chat_id=chat_id,
        text=msg,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'  # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    )
    post_message_id = sent_msg.message_id

    try:
        await update.message.delete()
    except Exception as e:
        logger.warning(f"Failed to delete command message: {e}")

    delay = (deadline - datetime.now()).total_seconds()
    context.application.create_task(
        delayed_notification(context, job_key, delay, chat_id, post_message_id)
    )

async def delayed_notification(context, job_key, delay, chat_id, message_id):
    await asyncio.sleep(delay)
    try:
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É/markup –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        await context.bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
        # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∏–∫–∞–∫–æ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç!
    except Exception as e:
        logger.warning(f"Edit post error: {e}")
    await notify_admins_about_job(context, job_key)

# ====== /start ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if args and args[0].startswith("apply_"):
        job_key = args[0].split("_", 1)[1]
        job = jobs_context.get(job_key)
        if job:
            context.user_data["job_key"] = job_key
            context.user_data.update(job)
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞: —Ä–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å–≤–µ–∂–µ–π —Å—Å—ã–ª–∫–µ.")
            return ConversationHandler.END
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
            reply_markup=ReplyKeyboardRemove()
        )
        return ASK_NAME
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—ã."
    )
    return ConversationHandler.END

# ====== –ü–æ–ª—É—á–∞–µ–º –§–ò–û ======
async def ask_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    fio = update.message.text.strip()
    context.user_data["fio"] = fio
    keyboard = [
        [InlineKeyboardButton("–Ø –ø–æ–µ–¥—É", callback_data="go")],
        [InlineKeyboardButton("–ù–µ –ø–æ–µ–¥—É", callback_data="nogo")]
    ]
    await update.message.reply_text(
        "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –Ω–∞ —Ä–∞–±–æ—Ç—ã?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ASK_CHOICE

# ====== –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä ======
async def on_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    choice = query.data
    await query.answer()
    job_key = context.user_data.get("job_key")
    if choice == "go":
        await save_application(job_key, context.user_data, "–ï–¥—É", "")
        await query.message.reply_text("–°–ø–∞—Å–∏–±–æ, –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞–±–æ—Ç—ã!")
        return ConversationHandler.END
    elif choice == "nogo":
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:")
        return ASK_REASON

# ====== –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ ======
async def on_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reason = update.message.text.strip()
    job_key = context.user_data.get("job_key")
    await save_application(job_key, context.user_data, "–ù–µ –µ–¥—É", reason)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ, –æ—Ç–∫–∞–∑ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!")
    return ConversationHandler.END

# ====== –û—Ç–º–µ–Ω–∞ ======
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_choice)],
            ASK_CHOICE: [CallbackQueryHandler(on_choice, pattern="^(go|nogo)$")],
            ASK_REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, on_reason)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )
    app.add_handler(CommandHandler("post", post))
    app.add_handler(conv)
    logger.info("Bot started")
    app.run_polling()

if __name__ == "__main__":
    main()